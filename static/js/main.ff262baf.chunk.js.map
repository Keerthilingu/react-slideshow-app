{"version":3,"sources":["components/Slides.js","App.js","serviceWorker.js","index.js","data/SLIDES.js"],"names":["Slides","props","restartButton","slides","length","setState","nextButtonState","prevButtonState","currentSlideIndex","restartButtonState","prevButton","count","state","nextButton","id","data-testid","disabled","this","className","onClick","style","margin","title","text","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PA0GeA,E,kDAvGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,cAAgB,WACA,EAAKD,MAAME,OAAOC,OAClB,EACR,EAAKC,SAAS,CAAEC,iBAAiB,IAEjC,EAAKD,SAAS,CAAEC,iBAAiB,EAAMC,iBAAiB,IAE5D,EAAKF,SAAS,CACVG,kBAAmB,EACnBC,oBAAoB,EACpBF,iBAAiB,KApBN,EAwBnBG,WAAa,WACT,IAAIC,EAAQ,EAAKC,MAAMJ,kBACc,IAAjC,EAAKI,MAAMJ,kBACX,EAAKH,SAAS,CACVE,iBAAiB,EACjBE,oBAAoB,EACpBH,iBAAiB,EACjBE,oBAAqBG,IAGzB,EAAKN,SAAS,CACVG,oBAAqBG,EACrBL,iBAAiB,KApCV,EAyCnBO,WAAa,WACT,IAAIF,EAAQ,EAAKC,MAAMJ,kBACnB,EAAKI,MAAMJ,oBAAsB,EAAKP,MAAME,OAAOC,OAAS,EAC5D,EAAKC,SAAS,CACVC,iBAAiB,EACjBE,oBAAqBG,IAGzB,EAAKN,SAAS,CACVG,oBAAqBG,EACrBJ,iBAAiB,EACjBE,oBAAoB,KAlD5B,EAAKG,MAAQ,CACTJ,kBAAmB,EACnBF,iBAAiB,EACjBC,iBAAiB,EACjBE,oBAAoB,GANT,E,qDA0Df,OACI,6BACI,yBAAKK,GAAG,cACJ,4BACIC,cAAY,iBACZC,SAAUC,KAAKL,MAAMH,mBACrBS,UAAU,WACVC,QAASF,KAAKf,eAJlB,WAQA,4BACIa,cAAY,cACZC,SAAUC,KAAKL,MAAML,gBACrBW,UAAU,WACVC,QAASF,KAAKP,YAJlB,QAQA,4BACIK,cAAY,cACZC,SACIC,KAAKL,MAAMN,iBACXW,KAAKhB,MAAME,OAAOC,OAAS,EAC3Ba,KAAKL,MAAMJ,kBAEfU,UAAU,WACVC,QAASF,KAAKJ,YARlB,SAaJ,yBAAKC,GAAG,QAAQI,UAAU,WACtB,wBAAIH,cAAY,QAAQK,MAAO,CAACC,OAAO,KAClCJ,KAAKhB,MAAME,OAAOc,KAAKL,MAAMJ,mBAAmBc,OAErD,uBAAGP,cAAY,QACVE,KAAKhB,MAAME,OAAOc,KAAKL,MAAMJ,mBAAmBe,Y,GAhGpDC,IAAMC,WCiBZC,MAbf,YAA0B,IAAXvB,EAAU,EAAVA,OACX,OACI,yBAAKe,UAAU,OACf,yBAAKA,UAAU,cACP,4BANF,kBASF,6BACI,kBAAC,EAAD,CAAQf,OAAQA,OCFZwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAK/B,OCTa,CACpB,CACEmB,MAAO,uBACPC,KAAM,2CAER,CACED,MAAO,qBACPC,KAAM,gEAER,CACED,MAAO,kBACPC,KAAM,8DAER,CACED,MAAO,sBACPC,KAAM,kEAER,CACED,MAAO,aACPC,KAAM,2DDRRY,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ff262baf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Slides extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentSlideIndex: 0,\r\n            nextButtonState: false,\r\n            prevButtonState: true,\r\n            restartButtonState: true,\r\n        };\r\n    }\r\n\r\n    restartButton = () => {\r\n        let count = this.props.slides.length;\r\n        if (count > 1) {\r\n            this.setState({ nextButtonState: false });\r\n        } else {\r\n            this.setState({ nextButtonState: true, prevButtonState: true });\r\n        }\r\n        this.setState({\r\n            currentSlideIndex: 0,\r\n            restartButtonState: true,\r\n            prevButtonState: true,\r\n        });\r\n    };\r\n\r\n    prevButton = () => {\r\n        let count = this.state.currentSlideIndex;\r\n        if (this.state.currentSlideIndex === 1) {\r\n            this.setState({\r\n                prevButtonState: true,\r\n                restartButtonState: true,\r\n                nextButtonState: false,\r\n                currentSlideIndex: --count,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                currentSlideIndex: --count,\r\n                nextButtonState: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    nextButton = () => {\r\n        let count = this.state.currentSlideIndex;\r\n        if (this.state.currentSlideIndex === this.props.slides.length - 2) {\r\n            this.setState({\r\n                nextButtonState: true,\r\n                currentSlideIndex: ++count,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                currentSlideIndex: ++count,\r\n                prevButtonState: false,\r\n                restartButtonState: false,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"navigation\">\r\n                    <button\r\n                        data-testid=\"button-restart\"\r\n                        disabled={this.state.restartButtonState}\r\n                        className=\"myButton\"\r\n                        onClick={this.restartButton}\r\n                    >\r\n                        Restart\r\n                    </button>\r\n                    <button\r\n                        data-testid=\"button-prev\"\r\n                        disabled={this.state.prevButtonState}\r\n                        className=\"myButton\"\r\n                        onClick={this.prevButton}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                    <button\r\n                        data-testid=\"button-next\"\r\n                        disabled={\r\n                            this.state.nextButtonState &&\r\n                            this.props.slides.length + 1 >\r\n                            this.state.currentSlideIndex\r\n                        }\r\n                        className=\"myButton\"\r\n                        onClick={this.nextButton}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n                <div id=\"slide\" className=\"mySlide\">\r\n                    <h1 data-testid=\"title\" style={{margin:50}}>\r\n                        {this.props.slides[this.state.currentSlideIndex].title}\r\n                    </h1>\r\n                    <p data-testid=\"text\">\r\n                        {this.props.slides[this.state.currentSlideIndex].text}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slides;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Slides from \"./components/Slides\";\nconst title = \"Slideshow App\";\n\nfunction App({ slides }) {\n    return (\n        <div className=\"App\">\n        <div className=\"App-header\">\n                <h3>{title}</h3>\n            </div>\n\n            <div>\n                <Slides slides={slides} />\n            </div>\n        </div>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SLIDES } from './data/SLIDES';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App slides={SLIDES} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const SLIDES = [\r\n  {\r\n    title: \"Today's workout plan\",\r\n    text: \"We're gonna do 3 fundamental exercises.\"\r\n  },\r\n  {\r\n    title: \"First, 10 push-ups\",\r\n    text: \"Do 10 reps. Remember about full range of motion. Don't rush.\"\r\n  },\r\n  {\r\n    title: \"Next, 20 squats\",\r\n    text: \"Squats are important. Remember to keep your back straight.\"\r\n  },\r\n  {\r\n    title: \"Finally, 15 sit-ups\",\r\n    text: \"Slightly bend your knees. Remember about full range of motion.\"\r\n  },\r\n  {\r\n    title: \"Great job!\",\r\n    text: \"You made it, have a nice day and see you next time!\"\r\n  }\r\n];\r\n"],"sourceRoot":""}